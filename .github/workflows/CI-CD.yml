name: Deploy to Azure VM

on:
  push:
    branches:
      - main  # Deploys to development
  create:
    tags:    # Deploys to production only for tags on main

jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: self-hosted

    steps:
      - name: Fix workspace permissions
        run: |
          sudo chown -R $USER:$USER /home/ubuntu/actions-runner/_work
          sudo chmod -R 755 /home/ubuntu/actions-runner/_work

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Determine Deployment Environment
        id: set-env
        run: |
          if [[ $GITHUB_REF_TYPE == "tag" && $GITHUB_BASE_REF == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_ENV
          else
            echo "environment=development" >> $GITHUB_ENV
          fi
      - name: create .env.development
        run: |
          cat <<EOF > .env.development
          DEBUG=True
          DB_HOST=${{ secrets.DEV_DB_HOST }}
          DB_USER=${{ secrets.DEV_DB_USER }}
          DB_PASS=${{ secrets.DEV_DB_PASSWORD }}
          DB_NAME=${{ secrets.DEV_DB_NAME }}
          DB_PORT=${{ secrets.DB_PORT }}
          SERVER_PORT=${{ secrets.SERVER_PORT }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
          # Add more variables as needed
          EOF

      - name: Build and Push Docker Images
        run: |
          docker compose -f docker-compose.${{ env.environment }}.yml build
          docker compose -f docker-compose.${{ env.environment }}.yml push

  deploy_dev:
    name: Deploy to Development
    runs-on: self-hosted
    needs: build-and-push

    if: startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.RSA_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into Azure VM and Deploy Development
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} << 'EOF'
            cd /home/ubuntu/actions-runner/_work/team76/team76

            cp /home/ubuntu/env_files/.env* .
            echo "Development .env file copied successfully"

            cp .env.development /frontend/.env

            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose -f docker-compose.development.yml pull
            docker compose -f docker-compose.development.yml down 
            docker compose -f docker-compose.development.yml up --build -d
            docker system prune -af
          EOF

      - name: Clean Up SSH Key
        run: rm -f private_key.pem

  deploy_prod:
    name: Deploy to Production
    runs-on: self-hosted
    needs: deploy_dev  
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Setup SSH Key
        run: |
          echo "${{ secrets.RSA_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: SSH into Azure VM and Deploy Production
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_IP }} << 'EOF'
            cd /home/ubuntu/actions-runner/_work/team76/team76

            cp /home/ubuntu/env_files/.env* .
            echo "Production .env file copied successfully"

            cp .env /frontend/.env

            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            docker compose -f docker-compose.production.yml pull
            docker compose -f docker-compose.production.yml down 
            docker compose -f docker-compose.production.yml up --build -d
            docker system prune -af
          EOF

      - name: Clean Up SSH Key
        run: rm -f private_key.pem
